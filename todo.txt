・テスト環境のため最初はSSLは使用しないでよいか？
・テストデータの準備は業務側
・ビルドマシンはAPサーバとは別？
・APサーバのIPアドレス
・DBのユーザ/パスワード@SID
・Administrator以外の管理者権限がある作業用のOSユーザ(niuser)が必要
・c:\NI\NI01Server\CMCOM.SI, NLCOM.SI, Sql, TableDef, License
        NI01App

手順書印刷

cleanLog.ps1
# ファイル圧縮
[System.Reflection.Assembly]::LoadFrom("C:\DIS-NET3\Application\lib\ICSharpCode.SharpZipLib.dll")
$zip = New-Object ICSharpCode.SharpZipLib.Zip.FastZip
$zip.CreateZip("C:\DIS-NET3\Release\log\log_" + (Get-Date -month (Get-Date).addmonths(-1).month -format yyyyMM) + ".zip", "C:\DIS-NET3\Release\log", $false, "[.]log", $null)
# 圧縮済ファイル削除
gci C:\DIS-NET3\Release\log\*.log | where {$_.LastWriteTime -lt (Get-Date -day 1 -hour 0 -minute 0 -second 0)} | ri

publish.bat
set srcDir=C:\DIS-NET3\publish\AppDIS3T
set destDir=\\10.252.170.178\ap\CompressionDownloadServer_IT1

del %destDir%\*.application
for /D %%s in (%srcDir%\"Application Files"\C1CCMN001N01*) do for /D %%d in (%destDir%\"Application Files"\C1CCMN001N01*) do ren "%%d" %%~ns
robocopy.exe "%srcDir%\Application Files" "%destDir%\Application Files" /mir /ndl /njh /njs /np /ns
robocopy.exe %srcDir% %destDir% /ndl /njh /njs /np /ns

C:\DIS-NET3\Release\PublishVerUp.exe C:\DIS-NET3\Client\src\C1CC\C1CCMN001\C1CCMN001N01\C1CCMN001N01.csproj %destDir%\index.htm
powershell C:\DIS-NET3\Release\dirVerUp.ps1 '%srcDir%\Application Files'
pause

dirVerUp.ps1
$pubdir = gci $args[0]
$idx = $pubdir.Name.LastIndexOf("_") + 1
$todir = Join-Path $args[0] ($pubdir.Name.SubString(0,$idx) + ([int]$pubdir.Name.SubString($idx) + 1))
mv $pubdir.FullName $todir

program.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Text;

namespace PublishVerUp
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args.Length != 2) return;

            if (!File.Exists(args[0])) return;

            int curRev = AppRevUp(args[0]);
            IndexRevUp(args[1], curRev);
        }

        private static int AppRevUp(string projUser)
        {
            string bak = projUser + ".bak";
            File.Move(projUser, bak);

            XmlDocument doc = new XmlDocument();
            doc.Load(bak);

            // Revision取得
            XmlNode node = doc.GetElementsByTagName("ApplicationRevision")[0];
            int rev = int.Parse(node.InnerText);
            node.InnerText = ((int)(rev + 1)).ToString();

            // MinimumRequiredVersion設定
            node = doc.GetElementsByTagName("MinimumRequiredVersion")[0];
            node.InnerText = node.InnerText.Replace("." + rev, "." + (rev + 1));
            
            doc.Save(projUser);
            File.Delete(bak);

            return rev;
        }

        private static void IndexRevUp(string indexHtml, int curRev)
        {
            string bak = indexHtml + ".bak";
            File.Move(indexHtml, bak);

            using (StreamReader reader = new StreamReader(bak, Encoding.Default))
            using (StreamWriter writer = new StreamWriter(indexHtml, false, Encoding.Default))
            {
                string line;

                // レコード読み込みループ
                while ((line = reader.ReadLine()) != null)
                {
                    line = line.Replace("." + (curRev -1) + "</TD>", "." + curRev + "</TD>");
                    writer.WriteLine(line);
                }
            }

            File.Delete(bak);
        }
    }
}
